Buscadores Rails
=============

Esta guía trata sobre el método `find` definido en ActiveRecord::Base, el cual busca en las asociaciones, además de otros beneficios como realizar búsquedas delimitadas por nombres. Aprenderás a ser un maestro de las búsquedas.

== En un principio...

En un principio había SQL. El SQL se veía como esto:

[source,sql]
SELECT * FROM clients
SELECT * FROM clients WHERE id = '1'
SELECT * FROM clients LIMIT 0,1
SELECT * FROM clients ORDER BY id DESC LIMIT 0,1

En Rails, normalmente no necesitas escribir SQL (a diferencia de otros lenguajes) porque ActiveRecord está ahí para ayudarte a encontrar tus registros.

== Nuestros modelos

Para esta guía, definiremos los siguientes modelos:

[source,ruby]
class Client < ActiveRecord::Base
  has_one :address
  has_one :mailing_address
  has_many :orders
  has_and_belongs_to_many :roles
end  

[source,ruby]
class Address < ActiveRecord::Base
  belongs_to :client
end

[source,ruby]
class MailingAddress < Address
end

[source,ruby]
class Order < ActiveRecord::Base
  belongs_to :client, :counter_cache => true
end

[source,ruby]
class Role < ActiveRecord::Base
  has_and_belongs_to_many :clients
end

== Siendo agnóstico con la base de datos

ActiveRecord realizará las búsquedas en la base de datos por tí y es compatible con la mayoría de los sistemas de bases de datos (MySQL, PostgreSQL and SQLite por mencionar). Sin importar qué sistema estés usando, el formato de ActiveRecord siempre será el mismo.

== IDs, Primero, Último y Todos

ActiveRecord::Base contiene métodos definidos en él para hacer la interacción con la base de datos y las tablas en ella mucho, mucho más fácil: el método `find`. Éste método te permite pasar argumentos para realizar ciertas búsquedas en tu base de datos sin necesidad de utilizar SQL. Por ejemplo, si quisieras encontrar el registro con el id de 1, deberás escribir `Client.find(1)`, que realizaría la siguiente búsqueda en tu base de datos:

[source, sql]
SELECT * FROM `clients` WHERE (`clients`.`id` = 1) 
NOTA: Por favor, ten en cuenta que dado que esta tabla es una tabla estándar generada por Rails en las migraciones, la llave primaria está definida por default como 'id'. Si has especificado una llave primaria diferente en tus migraciones, ésta es la que Rails utilizará para realizar la búsqueda al llamar el método find, no la columna `id`.

Si quieres encontrar los clientes con las llaves 1 o 2, llamarías el método `Client.find([1,2])` o `Client.find(1,2)`, lo cual es ejecutado como:

[source, sql]
SELECT * FROM `clients` WHERE (`clients`.`id` IN (1,2)) 
[source,txt]
>> Client.find(1,2)
=> [#<Client id: 1, name: => "Ryan", locked: false, orders_count: 2, created_at: "2008-09-28 15:38:50", updated_at: "2008-09-28 15:38:50">, #<Client id: 2, name: => "Michael", locked: false, orders_count: 3, created_at: "2008-09-28 13:12:40", updated_at: "2008-09-28 13:12:40">]

Nota que si pasas una lista de números el resultado será devuelto como una lista, no como un objeto de tipo Client.

Si quisieras encontrar el primer cliente, simplemente escribirías `Client.find(:first)`, lo cual obtendría el primer registro de tipo Client en la base de datos.

[source,txt]
>> Client.find(:first)
=> #<Client id: 1, name: => "Ryan", locked: false, orders_count: 2, created_at: "2008-09-28 15:38:50", updated_at: "2008-09-28 15:38:50">
If you were running script/server you may see the following output:

[source,sql]
SELECT * FROM clients LIMIT 1

Indicando la búsqueda que Rails ha hecho en tu base de datos.

Para encontrar el último cliente simplemente escribe `Client.find(:last)` y encontrará el último cliente creado en la tabla de clientes.

[source,txt]
>> Client.find(:last)
=> #<Client id: 2, name: => "Michael", locked: false, orders_count: 3, created_at: "2008-09-28 13:12:40", updated_at: "2008-09-28 13:12:40">

[source,sql]
SELECT * FROM clients ORDER BY clients.id DESC LIMIT 1

Para encontrar todos los clientes simplemente escribe `Client.find(:all)`, lo que encontrará todos los clientes en tu tabla.

[source,txt]
>> Client.find(:all)
=> [#<Client id: 1, name: => "Ryan", locked: false, orders_count: 2, created_at: "2008-09-28 15:38:50", updated_at: "2008-09-28 15:38:50">, #<Client id: 2, name: => "Michael", locked: false, orders_count: 3, created_at: "2008-09-28 13:12:40", updated_at: "2008-09-28 13:12:40">]

Alternativamente a la llamada Client.find(:first)/`Client.find(:last)`/`Client.find(:all)`, puedes utilizar en su lugar los métodos de clase `Client.first`/`Client.last`/`Client.all`. `Client.first`, `Client.last` y `Client.all` sólo llaman las opciones más largas.

Ten en cuenta que `Client.first`/`Client.find(:first)` y `Client.last`/`Client.find(:last)` regresarán un sólo objecto, mientras que `Client.all`/`Client.find(:all)` regresarán un arreglo con objectos tipo Client, de la misma manera que mandar un arreglo de identificadores al método find lo haría.

== Condiciones

Si quieres incluir condiciones a tu búsqueda, puedes simplemente especificarlas dentro de ella, como en el ejemplo `Client.find(:first, :conditions => "orders_count = '2'")`. Pero, ¿qué pasa si el número indicado varía, digamos, como en un parámetro de alguna función o tomado de algún lugar del status del usuario? La búsqueda se vuelve algo como `Client.find(:first, :conditions => ["orders_count = ?", params[:orders]])`. ActiveRecord tomará el primer elemento de la condición de búsqueda y reemplazará los signos de interrogación (?) con el valor de cualquier elemento adicional. Si quisieras especificar dos condiciones, lo podrías hacer como `Client.find(:first, :conditions => ["orders_count = ? AND locked = ?", params[:orders], false])`. En este ejemplo, el primer signo de interrogación será reemplazado por el valor de :orders en params, y el segundo será reemplazado por true. Esto encontrará el primer record en la tabla que tenga un 2 en el campo orders_count y 'false' en el campo locked.

La razón para escribir código como:

[source, ruby]
`Client.find(:first, :conditions => ["orders_count = ?", params[:orders]])`

el lugar de:

`Client.find(:first, :conditions => "orders_count = #{params[:orders]}")`

se debe a la sanidad de los parámetros. Poner la variable directamente dentro del texto de condiciones escribirá la variable *como es*· Eso quiere decir que una variable no escapada puede poner tu base de datos completa en riesgo dado que una vez que un usuario malicioso encuentre la manera de explotar esta vulnerabilidad puede hacer prácticamente todo con ella. Nunca coloques parámetros directamente dentro de un string de condición.

Si lo que buscas es un rango dentro de una tabla, por ejemplo, los usuarios creados dentro de un cierto periodo de tiempo, puedes usar las opciones condicionales junto con la expresión IN de sql. Si tuviéramos dos fechas provenientes de un controlador podemos hacer algo como lo siguiente para buscar dentro de un rango.

[source, ruby]
Client.find(:all, :conditions => ["created_at IN (?)", (params[:start_date].to_date)..(params[:end_date].to_date)])

Esto generará la búsqueda apropiada, lo cual es muy bueno para rangos pequeños pero no lo es tanto para rangos más grandes. Por ejemplo, si pasas un rango de objetos representando un año de 365 días (o 366, dependiendo del año) tratará de empatar el campo de búsqueda con 365 cadenas.

[source, sql]
SELECT * FROM `users` WHERE (created_at IN ('2007-12-31','2008-01-01','2008-01-02','2008-01-03','2008-01-04','2008-01-05','2008-01-06','2008-01-07','2008-01-08','2008-01-09','2008-01-10','2008-01-11','2008-01-12','2008-01-13','2008-01-14','2008-01-15','2008-01-16','2008-01-17','2008-01-18','2008-01-19','2008-01-20','2008-01-21','2008-01-22','2008-01-23',...
2008-12-15','2008-12-16','2008-12-17','2008-12-18','2008-12-19','2008-12-20','2008-12-21','2008-12-22','2008-12-23','2008-12-24','2008-12-25','2008-12-26','2008-12-27','2008-12-28','2008-12-29','2008-12-30','2008-12-31')) 


Las cosas se pueden volverse *un desastre* si pasas objetos tipo Time, ya que tratará de empatar tu campo con *cada segundo* dentro del rango.

[source, ruby]
Client.find(:all, :conditions => ["created_at IN (?)", (params[:start_date].to_date.to_time)..(params[:end_date].to_date.to_time)])

[source, sql]
SELECT * FROM `users` WHERE (created_at IN ('2007-12-01 00:00:00', '2007-12-01 00:00:01' ... '2007-12-01 23:59:59', '2007-12-02 00:00:00'))

Esto podría causar un error en tu servidor de base de datos generando una excepción inesperada, por ejemplo, MySQL arrojará este error:

[source, txt]
Got a packet bigger than 'max_allowed_packet' bytes: <query>

Donde <query> es la búsqueda que generó el error.

En este ejemplo sería mejor itilizar los operadores SQL menor-que y mayor-que, como en:

[source, ruby]
Client.find(:all, :condtions => ["created_at > ? AND created_at < ?", params[:start_date], params[:end_date]])

Puedes también usar los signos mayor-o-igual-que y menor-o-igual-que de la siguiente manera:

[source, ruby]
Client.find(:all, :condtions => ["created_at >= ? AND created_at <= ?", params[:start_date], params[:end_date]])

Justo como en Ruby.

== Orden

Si estás obteniento un grupo de registros y quieres especificar un orden, puedes utilizar `Client.find(:all, :order => "created_at")` que por default ordenará los resultados en orden ascendente. Si quisieras ordenarlos de forma descendente, tan sólo señálalo usando `Client.find(:all, :order => "created_at desc")`

== Seleccionando campos específicos

Para seleccionar campos específicos, puedes usar la opción select de la siguiente manera: `Client.find(:first, :select => "viewable_by, locked")`. La opción select no utiliza un array de campos, pero acepta código tipo SQL. El código anterioir ejecutará `SELECT viewable_by, locked FROM clients LIMIT 0,1` en tu base de datos.

== Límite y Desplazamiento (offset)

Si quieres limitar el número de records a un cierto subconjunto de todos ellos usualmente utilizas un límite para ello, usualmente acompañado de un desplazamiento u offset. El límite es el máximo número de records que serán obtenidos de un query, y offset es a partir de qué record comenzará a leer la base de dato a partir del primer record. Por ejemplo, el siguiente código:

[source, ruby]
Client.find(:all, :limit => 5)

Esta búsqueda regresará un máximo de 5 clientes, y dado que no hemos especificado un desplazamiento, regresará los primeros 5 clientes de la base de datos. El SQL que ejecuta es:

[source,sql]
SELECT * FROM clients LIMIT 5

[source, ruby]
Client.find(:all, :limit => 5, :offset => 5)

Este código regresará un máximo de 5 clientes y, dado que especificamos el desplazamiento, regresará aquellos records a partir del quinto cliente en la table.T

[source,sql]
SELECT * FROM clients LIMIT 5, 5

== Agrupamiento

La opción de agrupar los resultados de búsqueda es útil, por ejemplo, si quieres encontrar una colección de órdenes hechas en cierta fecha en particular. Podemos usar la opción en el siguiente contexto.

[source, ruby]
Order.find(:all, :group => "date(created_at)", :order => "created_at")

Lo cual nos regresará un simple objeto tipo Order para cada fecha en la que tenemos órdenes registradas en la base de datos.

El SQL resultante es algo similar a:

[source, sql]
SELECT * FROM `orders` GROUP BY date(created_at)

== Sólo lectura

Readonly (sólo lectura) es una opción en las búsquedas que puedes especificar de manera que el resultado sea de sólo lectura. Cualquier intento de alterar o destruir el registro no tendrá resultado, resultando en una excepción de tipo `ActiveRecord::ReadOnlyRecord`. Para activar esta opcion, especifica de la siguiente manera:

[source, ruby]
Client.find(:first, :readonly => true)

Si asignas este resultado a la variable `client` en el siguiente ejemplo se lanzará la excepción ActiveRecord::ReadOnlyRecord:

[source, ruby]
client = Client.find(:first, :readonly => true)
client.locked = false
client.save

== Candados

Si desas detener la condición de carrera para un registro en particular, digamos que por ejemplo deseas incrementar sólo un campo de él, puedes utilizar la opción lock (candado) para asegurarte que el registro es actualizado correctamente. Se recomienda usarlo dentro de una transacción.

[source, ruby]
Topic.transaction do
  t = Topic.find(params[:id], :lock => true)
  t.increment!(:views)
end

== Poniendo a trabajar todo junto

Puedes encadenar estas opciones juntas sin un orden en particular, ya que ActiveRecord escribirá el SQL correctamente por tí. Si especificas dos instancias de la misma opción dentro de la llamada a find, ActiveRecord utilizará la última.

== Búsquedas pobladas

Las búsquedas pobladas (el término en inglés es eager loading) consiste en llamar registros asociados con los deseados en el menor número de queries posible. Digamos que por ejemplo deseamos llamar todas las direcciones asociadas con los clientes en la misma búsqueda, por lo que utilizaríamos `Client.find(:all, :include => :address)`. Si quisiéramos incluir tanto como la dirección (campo address) como la dirección de correo (campo mailing_address), usaríamos `Client.find(:all), :include => [:address, :mailing_address]). El campo include buscará primero los registros de los clientes y llamará después los registros asociados. Corriendo el servidor en una ventana a través de script/server, y ejecutando el mismo código a través de script/console en otra, la salida lucirá similar a lo siguiente:

[source, sql]
Client Load (0.000383)   SELECT * FROM clients 
Address Load (0.119770)   SELECT addresses.* FROM addresses WHERE (addresses.client_id IN (13,14)) 
MailingAddress Load (0.001985) SELECT mailing_addresses.* FROM mailing_addresses WHERE (mailing_addresses.client_id IN (13,14))

Los números `13` y `14` en la expresión SQL anterior son los identificadores de los clientes obtenidos del query `Client.find(:all)`. Rails realizará una consulta para obtener todas las direcciones que tienen un campo client_id de 13 o 14. Aunque esto se hace en 3 queries, esto es más eficiente que una búsqueda no poblada, ya que en caso contrario realizaría una consulta cada vez que quisieras obtener los campos `address` o `mailing_address` en alguno de los objetos del arreglo que regresó la consulta, lo que resulta en detrimento del desempeño si llamas un número grande de registros a la vez.

Un método alternativo (y más eficiente) de hacer búsquedas pobladas es usar la opción joins. Por ejemplo, si quisieras obtener todas las direcciones de un cliente haríamos `Client.find(:all, :joins => :address)` y si quisiéramos obtener tanto las direcciones como las direcciones de correo escribiríamos `Client.find(:all, :joins => [:address, :mailing_address])`. Esto es más eficiente, ya que realiza todo el SQL en una sola ejecución, como muestra el ejemplo:

[source, sql]
`Client Load (0.000455)   SELECT clients.* FROM clients INNER JOIN addresses ON addresses.client_id = client.id INNER JOIN mailing_addresses ON mailing_addresses.client_id = client.id

Este query es más eficiente, pero hay trampa. Si tienes clientes que no tienen dirección o dirección de correo no serán incluidos en la búsqueda. Si tienes una asociación como opcional, probablemente querrás usar include en lugar de joins.

Cuando uses búsquedas pobladas puedes especificar las condiciones para las columnas dentro de la búsqueda poblada para regresar un subconjunto de ella. Por ejemplo, si quisieras obtener un cliente y todas sus órdenes dentro de las últimas dos semanas podrías especificarlo con las condiciones de búsqueda poblada como sigue:

[source, ruby]

Client.find(:first, :include => "orders", :conditions => ["orders.created_at >= ? AND orders.created_at <= ?", Time.now - 2.weeks, Time.now])

[source]

== Búscadores dinámicos

Con cada campo (también conocido como atributo) que definas en tu tabla, ActiveRecord provee buscadores para ellos. Si tienes un campo llamado `name` en tu modelo Cliente, por ejemplo, obtienes los métodos `find_by_name` y `find_all_by_name` gratuitamente de ActiveRecord. Si además tienes un campo `locked` en el modelo del cliente, tendrás también los métodos `find_by_locked` y `find_all_by_locked`. Si quisieras encontrar tanto por el campo name como por el campo locked, puedes unir ambos buscadores simplemente escribiendo el conector `and` entre los campos, por ejemplo `Client.find_by_name_and_locked('Ryan', true)`. Estos buscadores son una excelente alternativa a usar las opciones en las condiciones, principalmente porque es más corto escribir `find_by_name(params[:name])` que escribir `find(:first, :conditions => ["name = ?", params[:name]])`. 

Hay otro grupo de buscadores dinámicos que te permiten crear o inicializar objetos que no son encontrados. Funcionan de manera similar a los otros buscadores dinámicos, y se utilizan de la siguiente forma `find_or_create_by_name(params[:name])`. Usar esta técnica realizará primero una búsqueda, y después creará el objeto si la búsqueda regresa nil. El SQL generado luce de la siguiente manera para la sentencia `Client.find_or_create_by_name('Ryan')`:

[source,sql]
SELECT * FROM `clients` WHERE (`clients`.`name` = 'Ryan') LIMIT 1
BEGIN
INSERT INTO `clients` (`name`, `updated_at`, `created_at`, `orders_count`, `locked`) VALUES('Ryan', '2008-09-28 15:39:12', '2008-09-28 15:39:12', '0', '0')
COMMIT

El hermano de `find_or_create`, find_or_initialize, encontrará un objeto, y si no existe mandará a llamar el método `new` con los parámetros que le mandes. Por ejemplo:

[source, ruby]
client = Client.find_or_initialize_by_name('Ryan')

asignará un cliente existente con el nombre 'Ryan' a la variable local, o bien inicializará un nuevo objeto similar al resultado de llamar `Client.new(:name => 'Ryan')`. A partir de aquí, puedes modificar los demas campos en el cliente llamando los métodos de acceso de atributos en el objeto: `client.locked = true`; y para guardar el registro a la base de datos simplemente llama al método `save` en éste.

== Encontrar por SQL

Si quisieras utilizar tu propia sentencia de SQL para encontrar registros en una tabla puedes utilizar el buscador `find_by_sql`. `find_by_sql` regresará un arreglo de objetos incluso si sólo regresara un registro como resultado de la llamada a la base de datos. Por ejemplo, ejecutar el siguiente query:

[source, ruby]
Client.find_by_sql("SELECT * FROM clients INNER JOIN orders ON clients.id = orders.client_id ORDER clients.created_at desc")

`find_by_sql` provee de una manera sencilla de realizar llamadas personalizadas a la base de datos y convertir esos objetos.

== Trabajando con asociaciones en contexto

Cuando defines una asociación de tipo has_many en un modelo obtienes el buscador para ésta, así como buscadores para dicha asociación. Esto es útil para encontrar registros asociados en el contexto del registro existente, por ejemplo, para encontrar todas las órdenes de un cliente que han sido enviadas pero no recibidas podrías hacer algo como `Client.find(params[:id]).orders.find_by_sent_and_received(true, false)`. Teniendo éste método disponible en todas las asociaciones es extremadamente útil cuando se utilizan controladores anidados. 

== Contextos nombrados

En esta sección cubriremos agregar contextos nombrados a los modelos en la asociación. Digamos que por ejemplo queremos encontrar todos los clientes del sexo masculino (males), ejecutaremos el siguiente código:

[source, ruby]
class Client < ActiveRecord::Base
  named_scope :males, :conditions => { :gender => "male" }
end

Y entonces llamaremos `Client.males` para obtener todos los clientes del género masculino.

Si quisieramos obtener todos los clientes que son activos, realizaríamos:

[source,ruby]
class Client < ActiveRecord::Base
  named_scope :active, :conditions => { :active => true }
end

Al llamar esta nueva búsqueda con contexto nombrado con el método `Client.active` realizará el mismo query que si usáramos `Client.find(:all, :conditions => ["active = ?", true])`. Ten en cuenta que la sintaxis de las condiciones en un contexto nombrado es diferente que la de find, y no son intercambiables. Si quisieras encontrar el primer cliente dentro de esta búsqueda nombrada realizarías `Client.active.first`.

y si quisiéramos encontrar todos los clientes que son activos y hombres podríamos concatenar las consultas de la siguiente manera:

[source, ruby]
Client.males.active

Si quisiéramos realizar una búsqueda `find` en ese subconjunto de clientes, podemos: Igual que con las asociaciones, las búsquedas con contextos nombrados permiten realizar un `find` en un conjunto de registros:

[source, ruby]
Client.males.active.find(:all, :conditions => ["age > ?", params[:age]])

Ahora, observa el código siguiente:

[source, ruby]
class Client < ActiveRecord::Base
  named_scope :recent, :conditions => { :created_at > 2.weeks.ago }
end

Lo que vemos aquí que pareciera una búsqueda en contexto nombrado estándar que define un método llamado recent que obtiene los registros creados en cualquier momento entre el tiempo actual y dos semanas antes. Esto es correcto para la primera vez, pero para después tiempo después a ese, `2.weeks.ago` permanece con el mismo valor en la variable, por lo que consistentemente regresará registros de esa fecha hasta que el modelo sea recargado de alguna manera, como reiniciando la aplicación. La manera de corregir esto es poner el código en un bloque de función lambda:

[source, ruby]
class Client < ActiveRecord::Base
  named_scope :recent, lambda { { :conditions => ["created_at > ?", 2.weeks.ago] } } 
end

Y ahora, cada vez que la búsqueda nombrada sea llamada, y debido a que ahora la función está envuelta en un bloque lambda, la fecha será obtenida cada vez que se requiera, por lo que obtendrás la fecha de 2 semanas atrás del tiempo de ejecución, no 2 semanas antes de la fecha en la que el modelo fue llamado.

En tu búsqueda con contexto nombrado se pueden usar las opciones `:include` y `:joins` de la misma manera que en `find`.

[source, ruby]
class Client < ActiveRecord::Base
  named_scope :active_within_2_weeks, :joins => :order, lambda { { :conditions => ["orders.created_at > ?", 2.weeks.ago] } }
end

Éste método, llamado `Client.active_within_2_weeks`, regresará todos los clientes que han hecho órdenes en las 2 semanas anteriores.

Si quisieras pasar un argumento compulsorio a una búsqueda nombrasa, sólo especifícalo en un parámetro de bloque como sigue:

[source, ruby]
class Client < ActiveRecord::Base
  named_scope :recent, lambda { |time| { :conditions => ["created_at > ?", time] } } }
end

Esto ahora funcionará si llamamos `Client.recent(2.weeks.ago)` pero no con `Client.recent`. Si quisiéramos pasar un parámetro opcional a esta llamada, usaríamos el operador splat `*` en los parámetros del bloque.

[source, ruby]
class Client < ActiveRecord::Base
  named_scope :recent, lambda { |*args| { :conditions => ["created_at > ?", args.first || 2.weeks.ago] } } }
end

Ahora funciona tanto con `Client.recent(2.weeks.ago)` como con `Client.recent`, regresando siempre ésta última llamada los registros creados entre hoy y 2 semanas atrás.

Recuerda que las búsquedas con contextos nombrados son concatenables, por lo que podrás llamar `Client.recent(2.weeks.ago).unlocked` para encontrar todos los clientes creados entre el tiempo actual y dos semanas en el pasado y que tienen su atributo locked igualado a falso.


== Existencia de los objetos

Si simplemente quisieras conocer la existencia de un objeto existe un método llamado `exists?`. Éste método realizará el mismo query a la base de datos que el método find, pero en lugar de regresar un objeto o una colección de objetos (o nil) regresará true o false.

[source, ruby]
Client.exists?(1)

El código anterior checará la existencia de un registro en la tabla de clientes con un id de 1 y regresará true si existe.

[source, ruby]
Client.exists?(1,2,3)
# or
Client.exists?([1,2,3])

`exists?` también acepta múltiples ids, como en el código anterior, pero el truco del método es que regresará true si alguno de estos registros existe.

Más allá de eso, `exists` acepta la opción `conditions` al igual que find:

[source, ruby]
Client.exists?(:conditions => "first_name = 'Ryan'")

== Valores calculados

Esta sección utiliza count como un método de ejmpli en este preámbulo, pero las opciones descritas igual aplican para todas las subsecciones.

`count` acepta condiciones muy similares al método `exists?`:

[source, ruby]
Client.count(:conditions => "first_name = 'Ryan'")

Lo que ejecutará:

[source, sql]
SELECT count(*) AS count_all FROM `clients` WHERE (first_name = 1) 

Puedes incluso utilizar los modificadores `include` o `joins` para lograr algo un poco más complicado:

[source, ruby]
Client.count(:conditions => "clients.first_name = 'Ryan' AND orders.status = 'received'", :include => "orders")

Lo que ejecutará:

[source, sql]
SELECT count(DISTINCT `clients`.id) AS count_all FROM `clients` LEFT OUTER JOIN `orders` ON orders.client_id = client.id WHERE (clients.first_name = 'name' AND orders.status = 'received') 

Especificamos `clients.first_name` por si se da el caso de que alguna de nuestras tablas join contenga un campo llamado `first_name`, de la misma manera que llamamos `orders.status` porque ese es el nombre de nuestra tabla join.


=== Cuenta (count)

Si quisieras saber cuántos registros hay en la tabla del modelo simplemente llamarías `Client.count`, lo que regresará el número. Si quieres ser más específico y encontrar los clientes con el atributo age no nulo en la base de datos, puedes usar `Client.count(:age)`.

Para otras opciones, por favor revisa la sección principal, Cálculos.

=== Promedio (Average)

Si quisieras obtener el promedio de cierto número en una de tus tablas simplemente llama el método `average` en la clase relacionada con la tabla. La llamada a este método luce de la siguiente manera:

[source, ruby]
Client.average("orders_count")

Lo cual regresará un número (posiblemente un número de punto flotante como 3.14159265) representando el promedio de los campos.

Para opciones, por favor revisa la sección principal, Cálculos

=== (Mínimo) Minimum

Si quisieras obtener el valor mínimo de un campo en la base de datos, llama al método `minimum` en la clase relacionada con la tabla. El método se llamaría de la siguiente manera:

[source, ruby]
Client.minimum("age")

Para opciones, por favor revisa la sección principal, Cálculos

=== Máximo (Maximum)

Si quisieras obtener el valor máximo de un campo en la base de datos, llama al método `maximum` en la clase relacionada con la tabla. El método se llamaría de la siguiente manera:

[source, ruby]
Client.maximum("age")

Para opciones, por favor revisa la sección principal, Cálculos


=== Suma (Sum)

Si quisieras obtener la suma de los valores de un campo en la base de datos, llama al método `minimum` en la clase relacionada con la tabla. El método se llamaría de la siguiente manera:

[source, ruby]
Client.sum("orders_count")

Para opciones, por favor revisa la sección principal, Cálculos

== Créditos

Gracias a Ryan Bates por su estupendo screencast en las búsquedas nombradas #108. La información en la sección de búsquedas de contexto nombrado es intencionalmente similar a ella, y sin el cast no hubiera sido posible.

Gracias a Mike Gunderloy por sus tips en la creación de esta guía.

Traducido por Rubén Medellín.
